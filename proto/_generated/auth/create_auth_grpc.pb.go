// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: auth/create_auth.proto

package auth

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CreateAuthService_CreateAuth_FullMethodName = "/CreateAuthService/CreateAuth"
)

// CreateAuthServiceClient is the client API for CreateAuthService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CreateAuthServiceClient interface {
	CreateAuth(ctx context.Context, in *CreateAuthRequest, opts ...grpc.CallOption) (*CreateAuthResponse, error)
}

type createAuthServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCreateAuthServiceClient(cc grpc.ClientConnInterface) CreateAuthServiceClient {
	return &createAuthServiceClient{cc}
}

func (c *createAuthServiceClient) CreateAuth(ctx context.Context, in *CreateAuthRequest, opts ...grpc.CallOption) (*CreateAuthResponse, error) {
	out := new(CreateAuthResponse)
	err := c.cc.Invoke(ctx, CreateAuthService_CreateAuth_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CreateAuthServiceServer is the server API for CreateAuthService service.
// All implementations should embed UnimplementedCreateAuthServiceServer
// for forward compatibility
type CreateAuthServiceServer interface {
	CreateAuth(context.Context, *CreateAuthRequest) (*CreateAuthResponse, error)
}

// UnimplementedCreateAuthServiceServer should be embedded to have forward compatible implementations.
type UnimplementedCreateAuthServiceServer struct {
}

func (UnimplementedCreateAuthServiceServer) CreateAuth(context.Context, *CreateAuthRequest) (*CreateAuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAuth not implemented")
}

// UnsafeCreateAuthServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CreateAuthServiceServer will
// result in compilation errors.
type UnsafeCreateAuthServiceServer interface {
	mustEmbedUnimplementedCreateAuthServiceServer()
}

func RegisterCreateAuthServiceServer(s grpc.ServiceRegistrar, srv CreateAuthServiceServer) {
	s.RegisterService(&CreateAuthService_ServiceDesc, srv)
}

func _CreateAuthService_CreateAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreateAuthServiceServer).CreateAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CreateAuthService_CreateAuth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreateAuthServiceServer).CreateAuth(ctx, req.(*CreateAuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CreateAuthService_ServiceDesc is the grpc.ServiceDesc for CreateAuthService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CreateAuthService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "CreateAuthService",
	HandlerType: (*CreateAuthServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAuth",
			Handler:    _CreateAuthService_CreateAuth_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "auth/create_auth.proto",
}
