// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: user/update_user.proto

package user

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	UpdateUserService_UpdateUser_FullMethodName = "/UpdateUserService/UpdateUser"
)

// UpdateUserServiceClient is the client API for UpdateUserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UpdateUserServiceClient interface {
	UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error)
}

type updateUserServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUpdateUserServiceClient(cc grpc.ClientConnInterface) UpdateUserServiceClient {
	return &updateUserServiceClient{cc}
}

func (c *updateUserServiceClient) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error) {
	out := new(UpdateUserResponse)
	err := c.cc.Invoke(ctx, UpdateUserService_UpdateUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UpdateUserServiceServer is the server API for UpdateUserService service.
// All implementations should embed UnimplementedUpdateUserServiceServer
// for forward compatibility
type UpdateUserServiceServer interface {
	UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserResponse, error)
}

// UnimplementedUpdateUserServiceServer should be embedded to have forward compatible implementations.
type UnimplementedUpdateUserServiceServer struct {
}

func (UnimplementedUpdateUserServiceServer) UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}

// UnsafeUpdateUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UpdateUserServiceServer will
// result in compilation errors.
type UnsafeUpdateUserServiceServer interface {
	mustEmbedUnimplementedUpdateUserServiceServer()
}

func RegisterUpdateUserServiceServer(s grpc.ServiceRegistrar, srv UpdateUserServiceServer) {
	s.RegisterService(&UpdateUserService_ServiceDesc, srv)
}

func _UpdateUserService_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpdateUserServiceServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UpdateUserService_UpdateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpdateUserServiceServer).UpdateUser(ctx, req.(*UpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UpdateUserService_ServiceDesc is the grpc.ServiceDesc for UpdateUserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UpdateUserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "UpdateUserService",
	HandlerType: (*UpdateUserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateUser",
			Handler:    _UpdateUserService_UpdateUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user/update_user.proto",
}
