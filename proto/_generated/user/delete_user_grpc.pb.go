// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: user/delete_user.proto

package user

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DeleteUserService_DeleteUser_FullMethodName = "/DeleteUserService/DeleteUser"
)

// DeleteUserServiceClient is the client API for DeleteUserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeleteUserServiceClient interface {
	DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*DeleteUserResponse, error)
}

type deleteUserServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDeleteUserServiceClient(cc grpc.ClientConnInterface) DeleteUserServiceClient {
	return &deleteUserServiceClient{cc}
}

func (c *deleteUserServiceClient) DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*DeleteUserResponse, error) {
	out := new(DeleteUserResponse)
	err := c.cc.Invoke(ctx, DeleteUserService_DeleteUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeleteUserServiceServer is the server API for DeleteUserService service.
// All implementations should embed UnimplementedDeleteUserServiceServer
// for forward compatibility
type DeleteUserServiceServer interface {
	DeleteUser(context.Context, *DeleteUserRequest) (*DeleteUserResponse, error)
}

// UnimplementedDeleteUserServiceServer should be embedded to have forward compatible implementations.
type UnimplementedDeleteUserServiceServer struct {
}

func (UnimplementedDeleteUserServiceServer) DeleteUser(context.Context, *DeleteUserRequest) (*DeleteUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}

// UnsafeDeleteUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeleteUserServiceServer will
// result in compilation errors.
type UnsafeDeleteUserServiceServer interface {
	mustEmbedUnimplementedDeleteUserServiceServer()
}

func RegisterDeleteUserServiceServer(s grpc.ServiceRegistrar, srv DeleteUserServiceServer) {
	s.RegisterService(&DeleteUserService_ServiceDesc, srv)
}

func _DeleteUserService_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeleteUserServiceServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeleteUserService_DeleteUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeleteUserServiceServer).DeleteUser(ctx, req.(*DeleteUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DeleteUserService_ServiceDesc is the grpc.ServiceDesc for DeleteUserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DeleteUserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "DeleteUserService",
	HandlerType: (*DeleteUserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeleteUser",
			Handler:    _DeleteUserService_DeleteUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user/delete_user.proto",
}
