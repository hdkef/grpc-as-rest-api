// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	entity "grpcrest/services/auth/domain/entity"

	mock "github.com/stretchr/testify/mock"
)

// AuthRepository is an autogenerated mock type for the AuthRepository type
type AuthRepository struct {
	mock.Mock
}

// CreateAuth provides a mock function with given fields: auth
func (_m *AuthRepository) CreateAuth(auth *entity.Auth) error {
	ret := _m.Called(auth)

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.Auth) error); ok {
		r0 = rf(auth)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteAuth provides a mock function with given fields: auth
func (_m *AuthRepository) DeleteAuth(auth *entity.Auth) error {
	ret := _m.Called(auth)

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.Auth) error); ok {
		r0 = rf(auth)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindUserIdPasswordByEmail provides a mock function with given fields: auth
func (_m *AuthRepository) FindUserIdPasswordByEmail(auth *entity.Auth) (string, string, error) {
	ret := _m.Called(auth)

	var r0 string
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(*entity.Auth) (string, string, error)); ok {
		return rf(auth)
	}
	if rf, ok := ret.Get(0).(func(*entity.Auth) string); ok {
		r0 = rf(auth)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(*entity.Auth) string); ok {
		r1 = rf(auth)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(*entity.Auth) error); ok {
		r2 = rf(auth)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// IsExistEmail provides a mock function with given fields: email
func (_m *AuthRepository) IsExistEmail(email *string) bool {
	ret := _m.Called(email)

	var r0 bool
	if rf, ok := ret.Get(0).(func(*string) bool); ok {
		r0 = rf(email)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// UpdateAuth provides a mock function with given fields: auth
func (_m *AuthRepository) UpdateAuth(auth *entity.Auth) error {
	ret := _m.Called(auth)

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.Auth) error); ok {
		r0 = rf(auth)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewAuthRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewAuthRepository creates a new instance of AuthRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAuthRepository(t mockConstructorTestingTNewAuthRepository) *AuthRepository {
	mock := &AuthRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
