// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"
	auth "grpcrest/proto/_generated/auth"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"
)

// AuthGRPCClient_ is an autogenerated mock type for the AuthGRPCClient_ type
type AuthGRPCClient_ struct {
	mock.Mock
}

// CreateAuth provides a mock function with given fields: ctx, in, opts
func (_m *AuthGRPCClient_) CreateAuth(ctx context.Context, in *auth.CreateAuthRequest, opts ...grpc.CallOption) (*auth.CreateAuthResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *auth.CreateAuthResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *auth.CreateAuthRequest, ...grpc.CallOption) (*auth.CreateAuthResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *auth.CreateAuthRequest, ...grpc.CallOption) *auth.CreateAuthResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*auth.CreateAuthResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *auth.CreateAuthRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAuth provides a mock function with given fields: ctx, in, opts
func (_m *AuthGRPCClient_) DeleteAuth(ctx context.Context, in *auth.DeleteAuthRequest, opts ...grpc.CallOption) (*auth.DeleteAuthResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *auth.DeleteAuthResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *auth.DeleteAuthRequest, ...grpc.CallOption) (*auth.DeleteAuthResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *auth.DeleteAuthRequest, ...grpc.CallOption) *auth.DeleteAuthResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*auth.DeleteAuthResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *auth.DeleteAuthRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAuth provides a mock function with given fields: ctx, in, opts
func (_m *AuthGRPCClient_) UpdateAuth(ctx context.Context, in *auth.UpdateAuthRequest, opts ...grpc.CallOption) (*auth.UpdateAuthResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *auth.UpdateAuthResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *auth.UpdateAuthRequest, ...grpc.CallOption) (*auth.UpdateAuthResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *auth.UpdateAuthRequest, ...grpc.CallOption) *auth.UpdateAuthResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*auth.UpdateAuthResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *auth.UpdateAuthRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewAuthGRPCClient_ interface {
	mock.TestingT
	Cleanup(func())
}

// NewAuthGRPCClient_ creates a new instance of AuthGRPCClient_. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAuthGRPCClient_(t mockConstructorTestingTNewAuthGRPCClient_) *AuthGRPCClient_ {
	mock := &AuthGRPCClient_{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
