// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// JWTService_ is an autogenerated mock type for the JWTService_ type
type JWTService_ struct {
	mock.Mock
}

// GenerateToken provides a mock function with given fields: userId
func (_m *JWTService_) GenerateToken(userId string) (string, error) {
	ret := _m.Called(userId)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(userId)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(userId)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ParseToken provides a mock function with given fields: tokenString
func (_m *JWTService_) ParseToken(tokenString string) (string, error) {
	ret := _m.Called(tokenString)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(tokenString)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(tokenString)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(tokenString)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewJWTService_ interface {
	mock.TestingT
	Cleanup(func())
}

// NewJWTService_ creates a new instance of JWTService_. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewJWTService_(t mockConstructorTestingTNewJWTService_) *JWTService_ {
	mock := &JWTService_{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
